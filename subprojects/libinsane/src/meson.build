pkg = import('pkgconfig')

libinsane_srcs = files(
    'bases/dumb.c',
    'basewrapper.c',
    'error.c',
    'log.c',
    'multiplexer.c',
    'normalizers/all_opts_on_all_sources.c',
    'normalizers/bmp.c',
    'normalizers/bmp2raw.c',
    'normalizers/clean_dev_descs.c',
    'normalizers/min_one_source.c',
    'normalizers/opt_aliases.c',
    'normalizers/raw24.c',
    'normalizers/resolution.c',
    'normalizers/safe_defaults.c',
    'normalizers/source_names.c',
    'normalizers/source_nodes.c',
    'normalizers/source_types.c',
    'safebet.c',
    'str2impls.c',
    'util.c',
    'workarounds/check_capabilities.c',
    'workarounds/dedicated_thread.c',
    'workarounds/one_page_flatbed.c',
    'workarounds/opt_names.c',
    'workarounds/opt_values.c',
)

deps = [dependency('threads')]

if host_machine.system() == 'windows'
    libinsane_srcs += [
        'bases/twain.c',
        'bases/wia/wia_automation.c',
        'bases/wia/wia_ll.c',
    ]
    deps += [
        dependency('regex'),
        dependency('iconv'),
    ]
else
    libinsane_srcs += [
        'bases/sane.c',
    ]
    deps += [dependency('sane-backends')]
endif

gen_version = custom_target(
    'gen-version-file',
    input: [],
    output: ['version.h'],
    command: [
        'sh', join_paths(meson.current_source_dir(), 'gen_version_file.sh'),
        '@OUTPUT@',
    ],
)

libinsane = library(
    'insane', libinsane_srcs, gen_version,
    include_directories: libinsane_inc,
    dependencies: deps,
    install: true,
)
libinsane_dep = declare_dependency(
    include_directories: libinsane_inc,
    link_with: libinsane
)

pkg.generate(
    description: 'Cross-platform Cross-API Cross-driver Cross-scanner image scan library',
    name: 'libinsane',
    libraries: [libinsane] + deps,
    version: '0.1',
)

