/*!
\page quickstart TL;DR

To simplify [continous integration](https://origami.openpaper.work),
Makefiles in all [OpenPaper.work](https://openpaper.work) projects present similar targets.

- make / make build : build the libinsane + libinsane-gobject
- make install : install libinsane + libinsane-gobject
- make doc : generate the documentation (doxygen for libinsane, and gtk-doc for libinsane-gobject)

# Build dependencies

\ref dependencies


# Build and System-wide Installation

```
sudo make install  # will install files in /usr/local
```

or

```
sudo make install PREFIX=/usr  # will install files in /usr
```

The Makefile simply calls  Meson and Ninja. All OpenPaper.work projects have
this Makefile. It is mainly used to simplify
[continuous integration scripts](https://gitlab.gnome.org/World/OpenPaperwork/buildbot_scripts).
Users and developers can also freely use those targets.
Package maintainers are advised to use the underlying build tools directly.
For Libinsane, it means using Meson and Ninja directly.


# Uninstalling

Depending on your versions of Meson and Ninja, the following may or may not
work:

```
sudo make uninstall
```


# Using it in C

## Usage

## In a C project

The C API is described in `subprojects/libinsane/include/libinsane/capi.h`
(specifically \ref lis_api "struct lis_api").

```
#include <libinsane/capi.h>
#include <libinsane/constants.h>
#include <libinsane/error.h>
#include <libinsane/safebet.h>
#include <libinsane/util.h>


void lets_scan(void)
{
#define CHECK_ERR(call) do { \
        err = call; \
        if (LIS_IS_ERROR(err)) { \
            fprintf( \
                stderr, "%s(L%d): ERROR: %X, %s\n", \
                __FILE__, __LINE__, \
                err, lis_strerror(err) \
            ); \
            goto end; \
        } \
    } while(0)


    enum lis_error err;
    struct lis_api *impl = NULL;
    struct lis_device_descriptor **dev_infos;
    struct lis_item *device = NULL;
    struct lis_item **sources;
    struct lis_scan_parameters parameters;
    struct lis_scan_session *scan_session;
    char img_buffer[4096];
    size_t bufsize;

    CHECK_ERR(lis_safebet(&impl));
    CHECK_ERR(impl->list_devices(impl, LIS_DEVICE_LOCATIONS_ANY, &dev_infos));

    if (dev_infos[0] == NULL) {
        fprintf(stderr, "No scan device found\n");
        return;
    }

    // let's use the first scan device found, because it looks cool.
    printf("Will use %s %s (%s ; %s:%s)\n",
        dev_infos[0]->vendor, dev_infos[0]->model,
        dev_infos[0]->type,
        dev_infos[0]->dev_id,
        dev_infos[0]->api_name);
    CHECK_ERR(impl->dev_open(impl, dev_infos[0]->dev_id, &device));

    CHECK_ERR(device->get_children(device, &sources));

    // Normalizers ensure us that there is at least one source,
    // so let's use the first one because it looks cool too.
    printf("Will use source %s", sources[0]->name);

    // Setting resolution: This one may or may not work, depending on the scanner
    CHECK_ERR(lis_set_option(sources[0], OPT_NAME_RESOLUTION, "300");
    // Normalizers ensure us that the mode option can take the value "Color"
    // (and that's it's the default value)
    CHECK_ERR(lis_set_option(sources[0], OPT_NAME_MODE, "Color");
    // Normalizers ensure us that by default, the maximum scan area will be used

    CHECK_ERR(sources[0]->scan_start(sources[0], &scan_session));

    // scan parameters must be obtained *after* the scan session has been started
    // if we want a reliable image width (this is a limitation of some drivers).
    CHECK_ERR(scan_session->get_scan_parameters(scan_session, &parameters));
    printf("Scan will be: %dpx x %dpx (%zd bytes)\n",
        parameters.width, parameters.height, parameters.image_size);

    while (!scan_session->end_of_feed(scan_session)) {
        while (!scan_session->end_of_page(scan_session)) {
            bufsize = sizeof(img_buffer);
            err = scan_session->scan_read(scan_session, img_buffer, &bufsize);
            CHECK_ERR(err);

            if (err == LIS_WARMING_UP) {
                // old scanners need warming time. No data has been returned.
                assert(bufsize == 0);
                sleep(1);
            }
            // do something with the chunk of the image/page that has just been scanned
        }
        // do something with the whole image/page that has just been scanned
    }
    // do something with all the images/pages that have just been scanned

end:
    if (device != NULL) {
        device->close(device);
    }
    if (impl != NULL) {
        impl->cleanup(impl);
    }

#undef CHECK_ERR
}
```

You can use pkg-config to get the correct compilation flags:

```
pkg-config --cflags --libs libinsane
```


## Using it with other programming languages

### Letting GObject Introspection find the library

By default, `make install` installs everything in `/usr/local`. However
by default, gobject-introspection looks only in `/usr`. So you can either
install Libinsane in /usr (not recommended) or define some environment
variables:

```
# For instance:
# export LD_LIBRARY_PATH=/usr/local/lib/x86_64-linux-gnu
# export GI_TYPELIB_PATH=/usr/local/lib/x86_64-linux-gnu/girepository-1.0
```

### Not installing Libinsane

When using Libinsane through GObject introspection, you can decide to *not*
install it system-wide at all. In that case, there is a script available to
define a development environment (similar to Python
virtualenv):

```
# it will compile Libinsane in the current work directory
# and define environment variables so you can use this freshly compiled
# version without installing it system-wide.
source ./activate_test_env.sh
```


### Example: Python 3

#### API init

\snippet subprojects/libinsane-gobject/examples/scan.py ExampleInit

#### Selecting the device and the scan source

\snippet subprojects/libinsane-gobject/examples/scan.py ExampleListGetDevice

\snippet subprojects/libinsane-gobject/examples/scan.py ExampleListGetScanSource

#### Managing scan options

\snippet subprojects/libinsane-gobject/examples/scan.py ExampleListOptions

\snippet subprojects/libinsane-gobject/examples/scan.py ExampleSetOption

\snippet subprojects/libinsane-gobject/examples/scan.py ExampleOptsToSet

#### Scanning

\snippet subprojects/libinsane-gobject/examples/scan.py ExampleScan

\snippet subprojects/libinsane-gobject/examples/scan.py ExampleRawToImg

#### Log management

\snippet subprojects/libinsane-gobject/examples/scan.py ExampleLogger

\snippet subprojects/libinsane-gobject/examples/scan.py ExampleSetLogger


*/
