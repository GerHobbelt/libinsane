/*!
\page quickstart TL;DR

To simplify [continous integration](https://origami.openpaper.work),
Makefiles in all [OpenPaper.work](https://openpaper.work) projects present similar targets.

- make / make build : build the libinsane + libinsane-gobject
- make install : install libinsane + libinsane-gobject
- make doc : generate the documentation (doxygen for libinsane, and gtk-doc for libinsane-gobject)

# Build dependencies

\ref dependencies


# Build and System-wide Installation

```
sudo make install  # will install files in /usr/local
```

or

```
sudo make install PREFIX=/usr  # will install files in /usr
```

The Makefile simply calls  Meson and Ninja. All OpenPaper.work projects have
this Makefile. It is mainly used to simplify
[continuous integration scripts](https://gitlab.gnome.org/World/OpenPaperwork/buildbot_scripts).
Users and developers can also freely use those targets.
Package maintainers are advised to use the underlying build tools directly.
For Libinsane, it means using Meson and Ninja directly.


# Uninstalling

Depending on your versions of Meson and Ninja, the following may or may not
work:

```
sudo make uninstall
```


# Using it in C

## Usage

## In a C project

The C API is described in `subprojects/libinsane/include/libinsane/capi.h`
(specifically \ref lis_api "struct lis_api").

\snippet subprojects/libinsane/examples/lis_scan.c ExampleLisScan

You can use pkg-config to get the correct compilation flags:

```
pkg-config --cflags --libs libinsane
```


## Using it with other programming languages

### Letting GObject Introspection find the library

By default, `make install` installs everything in `/usr/local`. However
by default, gobject-introspection looks only in `/usr`. So you can either
install Libinsane in /usr (not recommended) or define some environment
variables:

```
# For instance:
# export LD_LIBRARY_PATH=/usr/local/lib/x86_64-linux-gnu
# export GI_TYPELIB_PATH=/usr/local/lib/x86_64-linux-gnu/girepository-1.0
```

### Not installing Libinsane

When using Libinsane through GObject introspection, you can decide to *not*
install it system-wide at all. In that case, there is a script available to
define a development environment (similar to Python
virtualenv):

```
# it will compile Libinsane in the current work directory
# and define environment variables so you can use this freshly compiled
# version without installing it system-wide.
source ./activate_test_env.sh
```


### Example: Python 3

#### API init

\snippet subprojects/libinsane-gobject/examples/scan.py ExampleInit

#### Selecting the device and the scan source

\snippet subprojects/libinsane-gobject/examples/scan.py ExampleListGetDevice

\snippet subprojects/libinsane-gobject/examples/scan.py ExampleListGetScanSource

#### Managing scan options

\snippet subprojects/libinsane-gobject/examples/scan.py ExampleListOptions

\snippet subprojects/libinsane-gobject/examples/scan.py ExampleSetOption

\snippet subprojects/libinsane-gobject/examples/scan.py ExampleOptsToSet

#### Scanning

\snippet subprojects/libinsane-gobject/examples/scan.py ExampleScan

\snippet subprojects/libinsane-gobject/examples/scan.py ExampleRawToImg

#### Log management

\snippet subprojects/libinsane-gobject/examples/scan.py ExampleLogger

\snippet subprojects/libinsane-gobject/examples/scan.py ExampleSetLogger


*/
