/*!

\page dev_rules Rules for contributions

# Documentation driven tests, test driven development

When adding new feature(s), as much as possible, please try to write documentation even
before writing tests. It will act as specifications and writing it will force you to design
clearly what you're going to do.

Then write tests. It will let you make sure that what you want to do makes sense and
will probably work.

Then write code.


# Checking, Testing and Documenting

## On GNU/Linux Debian:

```
apt install \
    clang-tidy-4.0 \
    valgrind \
    libcunit1-ncurses-dev
```

You must also enable the Sane test backend in `/etc/sane.d/dll.conf`.

Then just run:
* Static analysis: `make check`
* Unit tests: `make test`
* Documentation generation: `make doc`


## Microsoft Windows

On Windows, there is no automated tests for WIA2 or TWAIN support (there is no
test backend).
But it's still worth running `make test` to test all the workarounds and normalizers.

`make check` and `make doc` may or may not work on Windows.


# [Buildbot](https://origami.openpaper.work) is always right

Tests must all pass. The Buildbot is the reference. If some tests pass on your
computer but not on the Buildbot, then the Buildbot is right and your changes
won't be accepted.


# Buildbot works mainly with GNU/Linux

After each commit, [Buildbot](https://origami.openpaper.work) will build LibInsane.
It will build versions for both GNU/Linux and Windows on GNU/Linux.
It will also build the documentation, run static analysis and run tests on
GNU/Linux.

Buildbot builds everything with:

- Debian GNU/Linux stable.
- Linux version: GCC (32 and 64bits builds).
- Windows version: Mingw64 (64bits build only).
- `-Wall -Werror`.

Therefore:

1. LibInsane must always be buildable without warning on GNU/Linux (target being Windows
  or GNU/Linux ; with `-Wall -Werror`. Documentation must be buildable as well.
2. All normalizers and workarounds must build on GNU/Linux. Only direct API wrappers
  may not be buildable on GNU/Linux (for instance the wrappers for WIA APIs).
3. LibInsane tests must always pass on GNU/Linux. All normalizers and workarounds
  must have tests working on GNU/Linux, even if they are eventually designed
  to fix Windows issues.


# Code style convention

When coding on LibInsane, please try to stick to
[Linux coding style](https://www.kernel.org/doc/html/v4.15/process/coding-style.html). There
is only one exception, line lengths. In LibInsane, line lengths longer than 80 characters but
shorter than 100 characters are tolerated.

If you want to fix style issues, please make dedicated commits.


# Maintain your contributions

Please take care of maintaining your contributions (or find someone else to do the job).
Contributions unmaintained for too long may be removed.

It would be appreciated if you could leave a way to contact you in case bugs are reported.
The most practical way is simply to put your email address in your Git commits.

*/
