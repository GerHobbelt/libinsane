/*!
\page howto_general General Libinsane principles

### API & implementations

Libinsane provides a single API but
\ref structure "has many implementations for it". Most of the time, you will
only want the implementation "safebet". It is a composition of many other
implementations that will provide you a consistent behaviour across all
platform and devices.

You're advised to get an implementation when your application starts
and clean it up just before your application ends.


### Device descriptor

The API allows you to obtain a list of devices connected to the computer
(with `implementation.list_devices()`).
For each device, it will provide you with a vendor name, a model name,
a device type name, and more importantly a device identifier. The device
identifier can then be used to access the device (with
`implementation.get_device()`).


### Items, devices and sources

![Item tree](item_tree.png)

Libinsane provides an item tree (inspired by WIA2):

- Items can be devices: A device is a scanner device in its entirety.
- Items can be sources: A Source is scanner input. Some scanners have only
  one (usually a flatbed), some have 2 or more (usually a flatbed and an
  automatic document feeder).
- Items can have other items as children: The children of device are its
  sources. All root items are always devices. All their children are always
  sources.
- Root items (devices) provide children but children (sources) will always
  return an empty list of children.

All items provide a set of options.


#### Root item / scan device

`implementation.get_device()` will return you a root item (aka a device).
When you're done scanning, only this root item will have to be closed.
When you close the root item, all the children are closed too and must not
be used anymore.

You're advised to get a device only just before wanting to configure and use
it or list its options and close it as soon as you're done with it. It's not
recommended nor tested to keep a device opened for a long time.

`root.get_children()` will provide you with all the available sources of the
device.


#### Child item / scan source

Usually you cannot scan using the root item. You should always set the options
on the child item (source) you want to use and use that child.

To simplify the use of root and children, all the options available on the
root item are also made available on all the children.


### Setting the options

Once you have found the child item (source) that you want to use, you have to
configure it. Some options are read-only, some options can be modified. Some
can have integers as values, some can have strings, etc. Some options have a
constraint defining what values are allowed. This constraint can be a range or
a list.

Only a small subset of options are guaranteed to be found on any child item
(inspired by [Sane](http://www.sane-project.org/sane2/0.08/doc014.html)):

- `mode`: value is guaranteed to be a string. guaranteed possible values:
  `Color`, `LineArt` (black & white), `Gray (grayscale)
- `resolution`: value is guaranteed to be an integer. Constraint is guaranteed
  to be expressed as a list of integer values.

Some options, while not guaranteed to be present, are available on most devices:

- Scan area options:
  - `tl-x`: Top left corner of the area that will be scanner. X coordinates.
    No guarantees regarding the type of its value.
  - `tl-y`: Top left corner of the area that will be scanner. Y coordinates.
    No guarantees regarding the type of its value.
  - `br-x`: Bottom left corner of the area that will be scanner. X coordinates.
    No guarantees regarding the type of its value.
  - `br-y`: Bottom left corner of the area that will be scanner. Y coordinates.
    No guarantees regarding the type of its value.
  - Guarantee: By default, those options will be set so the scanner scans
    the biggest area possible.

Other options are device-dependant and driver-dependant.

Once all the options are set, we can finally scan something.


### Scanning

Using `item.scan_start()` on a child node, you can obtain a scan session.
From a scan session, you can obtain one or more pages / scanner images.

- `get_scan_parameters()` provides information regarding the page being scanned.
- `scan_read()` returns the images as raw 24 pixels (even if scanning in
black&white or grayscale).
- `end_of_page()` indicates that you reached the end of the current page.
- `end_of_feed()` indicates that all pages have been scanned.
- `cancel()` allows to interrupt the scan session. It can be safely called
  once the scan session has been finished (`end_of_feed() == True`). Calling
  it before may or may not work (it may even causes crahses). If you want to
  cancel a scan while it's running, you're advised to simply let it end.
  The session cannot be used once this function has been called.

Those function are intended to be called in the following order:

```
session = item.scan_start()

while not session.end_of_feed()
    params = session.get_scan_parameters()

    whole_image = []
    while not session.end_of_page():
        raw24 = session.scan_read()
        whole_image += raw24

    whole_image = convert_it_as_you_want(whole_image, params)
    whole_image.save()

session.cancel()
```

*/
