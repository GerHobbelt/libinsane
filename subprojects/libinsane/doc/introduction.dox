/*!

\page introduction What is LibInsane ?

LibInsane is a library allowing access to image scanners. It is the successor of
[Pyinsane](https://github.com/openpaperwork/pyinsane/)

Its name is a reference to the library [Sane](http://sane-project.org/).


# Image scanners you said ?

Yep, those things:

![Simple flatbed scanner](flatbed.png)
![Multi-functions printer, including a scanner with feeder](flatbed_and_feeder.png)
![Old-school portable scanner](handheld.png)
![New-school portable scanner](portable.png)
![Scanner with only a feeder](adf.png)

Basically, paper eaters. Not webcams, not your smartphone, not USB keys, not
other weird thingies that could acquire or generate images.


# Main features

- Cross-platform: Linux, \*BSD and Windows.
- Cross-API: [Sane](http://sane-project.org/) (Linux, \*BSD),
  [WIA2](https://msdn.microsoft.com/en-us/library/windows/desktop/ms630368(v=vs.85).aspx) (Windows),
  [TWAIN](https://www.twain.org/) (Windows).
- Cross-language: Thanks to [GObject introspection](https://wiki.gnome.org/action/show/Projects/GObjectIntrospection?action=show&redirect=GObjectIntrospection).
- Cross-scanner and cross-driver: Because a lot of them have their own quirks (and sometimes bugs).


# Overall view

Let the insanity begin !

The end goal of LibInsane is to have a consistent behavior across
all scan APIs, all scanners, and all drivers. All the workarounds
and weird quirks should be implemented in LibInsane and not the
applications using it.

For that purpose, LibInsane provides a bunch of components, each
solving a specific problem (working around a bug, normalizing
the behavior of drivers, etc).

These components all implement \ref normalized_api "a normalized C API"
(think object-oriented interface). This API provides a generic way to
access scanners and their options and a generic way to scan. In other
words, there is a single API implemented by all components. Many of the
components actually just wrap other implementations with their own,
changing slightly the behavior of the wrapped component.

- Component for WIA support (Windows) implements the normalized API.
- Component for Twain support (Windows) implements the normalized API.
- Component for Sane support (Linux) implements the normalized API.
- Workaround components wraps the normalized API provided by others, and
  provide themselves an implementation of the normalized API.
- Behavior normalization components wraps too the normalized API provided
  by others, and provide themselves an implementation of the normalized API.
- A component to manage access to multiple components at the same time:
  wraps multiple implementations the normalized API and provides an
  implem.. well you get the idea ?
- The GObject Introspection support wraps the normalized API.

Since most of the components wrap other components, they can be stacked easily
each on top of another and can be enabled or disabled easily.

![Design of LibInsane](design.png)

While it may sound like a lot of wrapping and layers, this approach allows
modularity. Any workaround or behavior normalization component can be enabled
or disabled easily for debugging and clear
[separation of concerns](https://en.wikipedia.org/wiki/Separation_of_concerns)
is ensured.

*/
